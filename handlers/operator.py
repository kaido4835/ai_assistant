# handlers/operator.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import Settings
from utils.session_manager import SessionManager
from services.lead_service import LeadService
import asyncio
from datetime import datetime, timedelta


class OperatorHandler:
    def __init__(self):
        self.active_conversations = {}  # user_id -> operator_chat_id
        self.operator_sessions = {}  # operator_chat_id -> [user_ids]

    async def request_operator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        session_manager: SessionManager = context.bot_data['session_manager']
        lead_service: LeadService = context.bot_data['lead_service']

        session = session_manager.get_or_create_session(user_id)
        session.stage = "waiting_for_operator"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if user_id in self.active_conversations:
            await update.message.reply_text(
                "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º", callback_data="operator_programs")],
            [InlineKeyboardButton("üìÑ –ü–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="operator_documents")],
            [InlineKeyboardButton("üí∞ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="operator_pricing")],
            [InlineKeyboardButton("üöÄ –ì–æ—Ç–æ–≤ –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="operator_apply")],
            [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="operator_other")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîó **–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ, —Å —á–µ–º –≤–∞–º –ø–æ–º–æ—á—å, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
            reply_markup=reply_markup
        )

        session_manager.save_session(session)

    async def handle_operator_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        chat_id = query.message.chat_id
        request_type = query.data.replace("operator_", "")

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        session_manager: SessionManager = context.bot_data['session_manager']
        lead_service: LeadService = context.bot_data['lead_service']

        session = session_manager.get_or_create_session(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        request_types = {
            "programs": "üìö –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º",
            "documents": "üìÑ –ü–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
            "pricing": "üí∞ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "apply": "üöÄ –ì–æ—Ç–æ–≤ –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "other": "‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"
        }

        session.profile['operator_request_type'] = request_type
        session.profile['operator_request_time'] = datetime.now().isoformat()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            f"‚úÖ **–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"**–¢–∏–ø:** {request_types.get(request_type, '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')}\n"
            f"**–°—Ç–∞—Ç—É—Å:** –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...\n\n"
            f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-5 –º–∏–Ω—É—Ç\n"
            f"üì± –ü–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ."
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_found = await self.find_available_operator(session, context, lead_service)

        if not operator_found:
            # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã, —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            await self.add_to_queue(session, context)

        session_manager.save_session(session)

    async def find_available_operator(self, session, context: ContextTypes.DEFAULT_TYPE, lead_service) -> bool:
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        if not Settings.MANAGER_CHAT_ID:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
        operator_chat_id = int(Settings.MANAGER_CHAT_ID)

        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

        try:
            await self.connect_to_operator(session.user_id, operator_chat_id, context, lead_service, session)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
            return False

    async def connect_to_operator(self, user_id: int, operator_chat_id: int, context: ContextTypes.DEFAULT_TYPE,
                                  lead_service, session):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.active_conversations[user_id] = operator_chat_id

        if operator_chat_id not in self.operator_sessions:
            self.operator_sessions[operator_chat_id] = []
        self.operator_sessions[operator_chat_id].append(user_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keyboard = [
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="end_operator_chat")]
        ]
        user_reply_markup = InlineKeyboardMarkup(user_keyboard)

        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä!**\n\n"
                 "üë®‚Äçüíº –°–µ–π—á–∞—Å —Å –≤–∞–º–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
                 "üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n"
                 "‚ö° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å:\n"
                 "‚Ä¢ –í–∞—à–∏–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏\n"
                 "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–ø—Ä–æ–≥—Ä–∞–º–º–∞–º\n"
                 "‚Ä¢ –ë—é–¥–∂–µ—Ç–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏",
            reply_markup=user_reply_markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        lead_report = lead_service.create_lead_report(session)
        request_type = session.profile.get('operator_request_type', 'general')

        operator_keyboard = [
            [InlineKeyboardButton(f"üìû –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", callback_data=f"reply_to_{user_id}")],
            [InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å {user_id}", callback_data=f"end_chat_{user_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="operator_stats")]
        ]
        operator_reply_markup = InlineKeyboardMarkup(operator_keyboard)

        await context.bot.send_message(
            chat_id=operator_chat_id,
            text=f"üîî **–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n"
                 f"**ID:** {user_id}\n"
                 f"**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {request_type}\n"
                 f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}\n\n"
                 f"{lead_report}\n\n"
                 f"üí¨ –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –Ω–∞—á–∞–≤ —Å /reply_{user_id}",
            reply_markup=operator_reply_markup
        )

    async def add_to_queue(self, session, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è"""
        await context.bot.send_message(
            chat_id=session.user_id,
            text="‚è≥ **–í –æ—á–µ—Ä–µ–¥–∏**\n\n"
                 "–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n"
                 "üìç –í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: 1-2\n"
                 "‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 5-10 –º–∏–Ω—É—Ç\n\n"
                 "üîî –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è!\n"
                 "üí¨ –ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        asyncio.create_task(self.recheck_queue_later(session, context))

    async def recheck_queue_later(self, session, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è"""
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if session.user_id not in self.active_conversations:
            lead_service = context.bot_data['lead_service']
            operator_found = await self.find_available_operator(session, context, lead_service)

            if not operator_found:
                await context.bot.send_message(
                    chat_id=session.user_id,
                    text="‚è≥ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
                         "üìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +7 XXX XXX XX XX"
                )

    async def handle_user_message_to_operator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
        user_id = update.effective_user.id

        if user_id not in self.active_conversations:
            return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É

        operator_chat_id = self.active_conversations[user_id]
        user_message = update.message.text

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=operator_chat_id,
            text=f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_id}:**\n\n{user_message}\n\n"
                 f"üìù *–û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç*"
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
        return True

    async def handle_operator_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message_text = update.message.text

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /reply_USER_ID
        if not message_text.startswith('/reply_'):
            return False

        try:
            parts = message_text.split(' ', 1)
            user_id = int(parts[0].replace('/reply_', ''))
            reply_text = parts[1] if len(parts) > 1 else "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω"
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_USER_ID –≤–∞—à_–æ—Ç–≤–µ—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        operator_chat_id = update.effective_chat.id
        if user_id not in self.active_conversations or self.active_conversations[user_id] != operator_chat_id:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞–º")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üëç –°–ø–∞—Å–∏–±–æ", callback_data="thanks_operator")],
            [InlineKeyboardButton("‚ùì –£—Ç–æ—á–Ω–∏—Ç—å", callback_data="clarify_operator")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üë®‚Äçüíº **–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{reply_text}",
            reply_markup=reply_markup
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True

    async def end_operator_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in self.active_conversations:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
            return

        operator_chat_id = self.active_conversations[user_id]

        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        del self.active_conversations[user_id]
        if operator_chat_id in self.operator_sessions:
            if user_id in self.operator_sessions[operator_chat_id]:
                self.operator_sessions[operator_chat_id].remove(user_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="rate_operator")],
            [InlineKeyboardButton("üîÅ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–Ω–æ–≤–∞", callback_data="connect_manager")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚úÖ **–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
            "–º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.\n\n"
            "üìß Email: info@example.com\n"
            "üì± Telegram: @education_support",
            reply_markup=reply_markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=operator_chat_id,
            text=f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω"
        )

    async def get_operator_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        operator_chat_id = query.message.chat_id
        active_chats = len(self.operator_sessions.get(operator_chat_id, []))

        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞**

üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:** {active_chats}
‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%H:%M')}
üìà **–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** 12 –¥–∏–∞–ª–æ–≥–æ–≤
‚≠ê **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** 4.8/5

üîî **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /reply_USER_ID - –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /help_operator - —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        """

        await query.edit_message_text(stats_text)