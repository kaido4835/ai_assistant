# handlers/operator.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import Settings
from utils.session_manager import SessionManager
from services.lead_service import LeadService
import asyncio
from datetime import datetime, timedelta


class OperatorHandler:
    def __init__(self):
        self.active_conversations = {}  # user_id -> operator_user_id
        self.operator_sessions = {}  # operator_user_id -> [user_ids]
        self.operator_workload = {}  # operator_user_id -> count

    async def find_available_operator(self, session, context: ContextTypes.DEFAULT_TYPE, lead_service) -> bool:
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        available_operators = Settings.get_available_operators()

        if not available_operators:
            print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            return False

        # –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        best_operator = None
        min_workload = float('inf')

        for operator_id in available_operators:
            current_workload = self.operator_workload.get(operator_id, 0)
            if current_workload < Settings.MAX_CONCURRENT_CHATS and current_workload < min_workload:
                best_operator = operator_id
                min_workload = current_workload

        if best_operator:
            try:
                await self.connect_to_operator(session.user_id, best_operator, context, lead_service, session)
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {best_operator}: {e}")
                return False

        return False

    async def connect_to_operator(self, user_id: int, operator_user_id: int,
                                  context: ContextTypes.DEFAULT_TYPE, lead_service, session):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.active_conversations[user_id] = operator_user_id

        if operator_user_id not in self.operator_sessions:
            self.operator_sessions[operator_user_id] = []
        self.operator_sessions[operator_user_id].append(user_id)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        self.operator_workload[operator_user_id] = self.operator_workload.get(operator_user_id, 0) + 1

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keyboard = [
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="end_operator_chat")]
        ]
        user_reply_markup = InlineKeyboardMarkup(user_keyboard)

        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä!**\n\n"
                 "üë®‚Äçüíº –°–µ–π—á–∞—Å —Å –≤–∞–º–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
                 "üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n"
                 "‚ö° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å:\n"
                 "‚Ä¢ –í–∞—à–∏–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏\n"
                 "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–ø—Ä–æ–≥—Ä–∞–º–º–∞–º\n"
                 "‚Ä¢ –ë—é–¥–∂–µ—Ç–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏",
            reply_markup=user_reply_markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        lead_report = lead_service.create_lead_report(session)
        request_type = session.profile.get('operator_request_type', '–æ–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')

        operator_keyboard = [
            [InlineKeyboardButton(f"üìû –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_{user_id}")],
            [InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{user_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="operator_stats")]
        ]
        operator_reply_markup = InlineKeyboardMarkup(operator_keyboard)

        operator_message = f"""üîî **–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!**

**ID –∫–ª–∏–µ–Ω—Ç–∞:** {user_id}
**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {request_type}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}

{lead_report}

üí¨ **–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: `/reply_{user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç`

**–ü—Ä–∏–º–µ—Ä:**
`/reply_{user_id} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`
"""

        try:
            await context.bot.send_message(
                chat_id=operator_user_id,
                text=operator_message,
                reply_markup=operator_reply_markup
            )
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.disconnect_user(user_id, operator_user_id)
            raise e

    async def disconnect_user(self, user_id: int, operator_user_id: int):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        if user_id in self.active_conversations:
            del self.active_conversations[user_id]

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if (operator_user_id in self.operator_sessions and
                user_id in self.operator_sessions[operator_user_id]):
            self.operator_sessions[operator_user_id].remove(user_id)

        # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if operator_user_id in self.operator_workload:
            self.operator_workload[operator_user_id] = max(0,
                                                           self.operator_workload[operator_user_id] - 1)

    async def handle_operator_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message_text = update.message.text
        operator_user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
        if not Settings.is_operator(operator_user_id):
            return False

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /reply_USER_ID
        if not message_text.startswith('/reply_'):
            return False

        try:
            parts = message_text.split(' ', 1)
            user_id = int(parts[0].replace('/reply_', ''))
            reply_text = parts[1] if len(parts) > 1 else "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω"
        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: `/reply_USER_ID –≤–∞—à_–æ—Ç–≤–µ—Ç`\n"
                "üìù –ü—Ä–∏–º–µ—Ä: `/reply_123456 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`"
            )
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (user_id not in self.active_conversations or
                self.active_conversations[user_id] != operator_user_id):
            await update.message.reply_text(
                f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞–º**\n\n"
                f"üîç –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n"
                f"{', '.join(map(str, self.operator_sessions.get(operator_user_id, []))) or '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö'}"
            )
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üëç –°–ø–∞—Å–∏–±–æ", callback_data="thanks_operator")],
            [InlineKeyboardButton("‚ùì –£—Ç–æ—á–Ω–∏—Ç—å", callback_data="clarify_operator")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üë®‚Äçüíº **–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{reply_text}",
                reply_markup=reply_markup
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    async def end_operator_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in self.active_conversations:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
            return

        operator_chat_id = self.active_conversations[user_id]

        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        del self.active_conversations[user_id]
        if operator_chat_id in self.operator_sessions:
            if user_id in self.operator_sessions[operator_chat_id]:
                self.operator_sessions[operator_chat_id].remove(user_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="rate_operator")],
            [InlineKeyboardButton("üîÅ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–Ω–æ–≤–∞", callback_data="connect_manager")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚úÖ **–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
            "–º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.\n\n"
            "üìß Email: info@example.com\n"
            "üì± Telegram: @education_support",
            reply_markup=reply_markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=operator_chat_id,
            text=f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω"
        )

    async def get_operator_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        operator_chat_id = query.message.chat_id
        active_chats = len(self.operator_sessions.get(operator_chat_id, []))

        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞**

üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:** {active_chats}
‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%H:%M')}
üìà **–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** 12 –¥–∏–∞–ª–æ–≥–æ–≤
‚≠ê **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** 4.8/5

üîî **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /reply_USER_ID - –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /help_operator - —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        """

        await query.edit_message_text(stats_text)