# handlers/messages.py
from telegram import Update
from telegram.ext import ContextTypes
from config.settings import Settings
from utils.session_manager import SessionManager
from services.ai_service import AIService
from services.program_search import ProgramSearchService
from services.lead_service import LeadService
from handlers.operator import OperatorHandler


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if 'operator_handler' not in context.bot_data:
        context.bot_data['operator_handler'] = OperatorHandler()

    operator_handler = context.bot_data['operator_handler']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message.text.startswith('/reply_'):
        if await operator_handler.handle_operator_reply(update, context):
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if update.message.text == '/help_operator':
        await send_operator_help(update, context)
        return
    elif update.message.text == '/stats':
        await operator_handler.get_operator_stats(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    user_id = update.effective_user.id
    if await operator_handler.handle_user_message_to_operator(update, context):
        return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    user_message = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ bot_data
    session_manager: SessionManager = context.bot_data['session_manager']
    ai_service: AIService = context.bot_data['ai_service']
    program_search: ProgramSearchService = context.bot_data['program_search']
    lead_service: LeadService = context.bot_data['lead_service']

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = session_manager.get_or_create_session(user_id)
    session.conversation_history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if "—Ö–æ—á—É —É—á–∏—Ç—å—Å—è" in user_message.lower():
        session.stage = "collecting_info"
        session.profile['question_stage'] = 'degree'

        response = """
–°—É–ø–µ—Ä! –ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üéØ

–î–ª—è –Ω–∞—á–∞–ª–∞ - –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?
üéì –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç (–ø–µ—Ä–≤–æ–µ –≤—ã—Å—à–µ–µ)
üéì –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ (—É–∂–µ –µ—Å—Ç—å –¥–∏–ø–ª–æ–º –±–∞–∫–∞–ª–∞–≤—Ä–∞)
        """
        await update.message.reply_text(response)
        session_manager.save_session(session)
        return

    elif "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" in user_message.lower():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        await operator_handler.request_operator(update, context)
        return

    elif "–ø—Ä–æ—Ü–µ—Å—Å–µ" in user_message.lower():
        await update.message.reply_text(Settings.PROCESS_INFO)
        return

    # –ü–æ—ç—Ç–∞–ø–Ω—ã–π —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if session.stage == "collecting_info":
        response = await handle_step_by_step_collection(user_message, session, program_search)
        await update.message.reply_text(response)
        session_manager.save_session(session)
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ AI
    ai_response, interest_score = await ai_service.get_response(user_message, session.profile)
    session.interest_score = max(session.interest_score, interest_score)
    session.conversation_history.append(f"–ë–æ—Ç: {ai_response}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if lead_service.should_notify_manager(session):
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="connect_manager")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        ai_response += "\n\nüí° –ü–æ—Ö–æ–∂–µ, –≤—ã —Å–µ—Ä—å–µ–∑–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?"
        await update.message.reply_text(ai_response, reply_markup=reply_markup)
    else:
        await update.message.reply_text(ai_response)

    session_manager.save_session(session)


async def send_operator_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/reply_USER_ID —Ç–µ–∫—Å—Ç` - –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/help_operator` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/reply_123456 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`
‚Ä¢ `/reply_789012 –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏`

**–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã:**
‚Ä¢ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
‚Ä¢ "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏"
‚Ä¢ "–û—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ email"
‚Ä¢ "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏"

**–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:**
‚úÖ –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç
‚úÖ –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏
‚ùå –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
‚ùå –ù–µ –¥–∞–≤–∞–π—Ç–µ –ª–æ–∂–Ω—ã—Ö –æ–±–µ—â–∞–Ω–∏–π

**–°—Ç–∞—Ç—É—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:**
üî• –ì–æ—Ä—è—á–∏–π –ª–∏–¥ - –≥–æ—Ç–æ–≤ –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
üî∂ –¢–µ–ø–ª—ã–π –ª–∏–¥ - –∞–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è
üîµ –•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥ - —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """

    await update.message.reply_text(help_text)


async def handle_step_by_step_collection(user_message: str, session, program_search) -> str:
    """–ü–æ—ç—Ç–∞–ø–Ω—ã–π —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    current_stage = session.profile.get('question_stage', 'degree')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
    await extract_user_info(user_message, session)

    if current_stage == 'degree':
        if 'degree' in session.profile:
            session.profile['question_stage'] = 'field'
            return """
–ü–æ–Ω—è—Ç–Ω–æ! –ê –∫–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î

–ù–∞–ø—Ä–∏–º–µ—Ä:
üíª –ò–¢ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç  
üìä Data Science –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üíº –ë–∏–∑–Ω–µ—Å –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç

–ò–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!
            """
        else:
            return "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª ü§î –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –∏–ª–∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞?"

    elif current_stage == 'field':
        if 'field' in session.profile:
            session.profile['question_stage'] = 'budget'
            return """
–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –±—é–¥–∂–µ—Ç üí∞

–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≥–æ—Ç–æ–≤ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –≥–æ–¥ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ?

üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏, –§–∏–Ω–ª—è–Ω–¥–∏–∏, –®–≤–µ—Ü–∏–∏
üí∞ –ü–ª–∞—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç ‚Ç¨2000 –≤ –ß–µ—Ö–∏–∏ –¥–æ ‚Ç¨15000+ –≤ —á–∞—Å—Ç–Ω—ã—Ö –≤—É–∑–∞—Ö

–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –∏–ª–∏ "—Ö–æ—á—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ" üòä
            """
        else:
            return "–ö–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ò–¢, –±–∏–∑–Ω–µ—Å, –º–µ–¥–∏—Ü–∏–Ω–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"

    elif current_stage == 'budget':
        if 'max_budget' in session.profile or any(
                word in user_message.lower() for word in ['–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–±–µ–∑ –ø–ª–∞—Ç—ã', '–¥–∞—Ä–æ–º']):
            session.profile['question_stage'] = 'complete'
            session.stage = "showing_results"

            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            programs = program_search.search_programs(session.profile)
            return program_search.format_programs_response(programs)
        else:
            return "–ù–µ —É–ª–æ–≤–∏–ª —Å—É–º–º—É ü§î –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ –µ–≤—Ä–æ –∏–ª–∏ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'?"

    return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ - –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?"


async def extract_user_info(message: str, session):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_lower = message.lower()

    # –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if any(word in message_lower for word in ['–º–∞–≥–∏—Å—Ç—Ä', '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞', '–º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è', '–≤—Ç–æ—Ä–æ–µ –≤—ã—Å—à–µ–µ']):
        session.profile['degree'] = '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞'
    elif any(word in message_lower for word in ['–±–∞–∫–∞–ª–∞–≤—Ä', '–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', '–ø–µ—Ä–≤–æ–µ –≤—ã—Å—à–µ–µ', '–ø–µ—Ä–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']):
        session.profile['degree'] = '–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç'
    elif any(word in message_lower for word in ['—à–∫–æ–ª—É', '—à–∫–æ–ª—ã', '–æ–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É', '–≤—ã–ø—É—Å–∫–Ω–∏–∫', '11 –∫–ª–∞—Å—Å']):
        session.profile['degree'] = '–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç'
    elif any(word in message_lower for word in ['–¥–∏–ø–ª–æ–º', '–≤—ã—Å—à–µ–µ', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –æ–∫–æ–Ω—á–∏–ª']):
        session.profile['degree'] = '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞'

    # –û–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    fields = []
    if any(word in message_lower for word in ['–∏—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Å–æ—Ñ—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–æ–¥–∏–Ω–≥']):
        fields.append('–ò–¢')
    if any(word in message_lower for word in ['–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'ml']):
        fields.append('–ò–ò')
    if any(word in message_lower for word in
           ['data science', '–¥–∞–Ω–Ω—ã–µ', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö']):
        fields.append('Data Science')
    if any(word in message_lower for word in ['–±–∏–∑–Ω–µ—Å', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'mba', '—ç–∫–æ–Ω–æ–º–∏–∫–∞']):
        fields.append('–±–∏–∑–Ω–µ—Å')

    if fields:
        session.profile['field'] = fields

    # –ë—é–¥–∂–µ—Ç
    import re
    budget_patterns = [
        r'(\d+)[^\d]*(?:–µ–≤—Ä–æ|‚Ç¨|euro)',
        r'(\d+)[^\d]*(?:–¥–æ–ª–ª–∞—Ä–æ–≤?|\$|usd)',
        r'(\d+)[^\d]*(?:—Ç—ã—Å—è—á?|k)',
        r'–¥–æ\s*(\d+)',
        r'(\d+)\s*–≤\s*–≥–æ–¥'
    ]

    for pattern in budget_patterns:
        budget_match = re.search(pattern, message_lower)
        if budget_match:
            budget = int(budget_match.group(1))

            if '—Ç—ã—Å—è—á' in message_lower or 'k' in message_lower:
                budget *= 1000
            elif '–¥–æ–ª–ª–∞—Ä–æ–≤' in message_lower or '' in message_lower:
                budget = int(budget * 0.85)

            session.profile['max_budget'] = budget
            break

    # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    if any(word in message_lower for word in ['–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–±–µ–∑ –ø–ª–∞—Ç—ã', '–¥–∞—Ä–æ–º', 'free', '–Ω–µ –ø–ª–∞—Ç–∏—Ç—å', '0']):
        session.profile['max_budget'] = 0

    # –Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è
    if any(word in message_lower for word in ['–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', 'english', '–∞–Ω–≥–ª', 'ielts', 'toefl']):
        session.profile['language'] = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'