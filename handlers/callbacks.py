# handlers/callbacks.py
from telegram import Update
from telegram.ext import ContextTypes
from config.settings import Settings
from handlers.operator import OperatorHandler


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if 'operator_handler' not in context.bot_data:
        context.bot_data['operator_handler'] = OperatorHandler()

    operator_handler = context.bot_data['operator_handler']

    # –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if query.data == "connect_manager":
        await operator_handler.request_operator(update, context)
    elif query.data.startswith("operator_"):
        await operator_handler.handle_operator_request(update, context)
    elif query.data == "end_operator_chat":
        await operator_handler.end_operator_chat(update, context)
    elif query.data == "operator_stats":
        await operator_handler.get_operator_stats(update, context)
    elif query.data.startswith("end_chat_"):
        # –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥
        await handle_operator_end_chat(update, context, operator_handler)
    elif query.data == "thanks_operator":
        await query.edit_message_text("üíù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    elif query.data == "clarify_operator":
        await query.edit_message_text("‚ùì –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    elif query.data == "rate_operator":
        await show_operator_rating(update, context)


async def handle_operator_end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   operator_handler: OperatorHandler):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    user_id = int(query.data.replace("end_chat_", ""))
    operator_chat_id = query.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if user_id in operator_handler.active_conversations:
        del operator_handler.active_conversations[user_id]

    if operator_chat_id in operator_handler.operator_sessions:
        if user_id in operator_handler.operator_sessions[operator_chat_id]:
            operator_handler.operator_sessions[operator_chat_id].remove(user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await query.edit_message_text(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=user_id,
        text="üìû **–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
             "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
             "–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.\n\n"
             "üìß Email: info@example.com\n"
             "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @education_support"
    )


async def show_operator_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê", callback_data="rate_1"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!",
        reply_markup=reply_markup
    )


async def connect_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)"""
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if 'operator_handler' not in context.bot_data:
        context.bot_data['operator_handler'] = OperatorHandler()

    operator_handler = context.bot_data['operator_handler']
    await operator_handler.request_operator(update, context)


async def notify_manager(session, context: ContextTypes.DEFAULT_TYPE, lead_service):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    if not Settings.MANAGER_CHAT_ID:
        print("MANAGER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    lead_report = lead_service.create_lead_report(session)

    try:
        await context.bot.send_message(
            chat_id=Settings.MANAGER_CHAT_ID,
            text=lead_report
        )

        # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ –ë–î
        score = lead_service.calculate_lead_score(session)
        lead_service.db.create_lead(session.user_id, score)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")