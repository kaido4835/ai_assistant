# handlers/callbacks.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import Settings
from handlers.operator import OperatorHandler


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if 'operator_handler' not in context.bot_data:
        context.bot_data['operator_handler'] = OperatorHandler()

    operator_handler = context.bot_data['operator_handler']

    # –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if query.data == "connect_manager":
        await operator_handler.request_operator(update, context)
    elif query.data.startswith("operator_"):
        await operator_handler.handle_operator_request(update, context)
    elif query.data == "end_operator_chat":
        await operator_handler.end_operator_chat(update, context)
    elif query.data == "operator_stats":
        await operator_handler.get_operator_stats(update, context)
    elif query.data.startswith("end_chat_"):
        # –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥
        await handle_operator_end_chat(update, context, operator_handler)
    elif query.data == "thanks_operator":
        await query.edit_message_text("üíù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    elif query.data == "clarify_operator":
        await query.edit_message_text("‚ùì –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
    elif query.data == "rate_operator":
        await show_operator_rating(update, context)

    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    elif query.data.startswith("quick_responses_"):
        await operator_handler.handle_operator_request(update, context)
    elif query.data.startswith("quick_reply_"):
        await operator_handler.handle_operator_request(update, context)
    elif query.data.startswith("send_quick_"):
        await handle_quick_response(update, context, operator_handler)
    elif query.data.startswith("back_to_client_"):
        await handle_back_to_client(update, context, operator_handler)
    elif query.data == "cancel_operator_queue":
        await handle_cancel_queue(update, context, operator_handler)
    elif query.data.startswith("rate_"):
        await handle_operator_rating(update, context)


async def handle_quick_response(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                operator_handler: OperatorHandler):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    query = update.callback_query
    data_parts = query.data.split("_")

    if len(data_parts) >= 4:
        user_id = int(data_parts[2])
        response_type = data_parts[3]
        await operator_handler.send_quick_response(query, user_id, response_type, context)


async def handle_back_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                operator_handler: OperatorHandler):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    query = update.callback_query
    user_id = int(query.data.replace("back_to_client_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    session_manager = context.bot_data['session_manager']
    lead_service = context.bot_data['lead_service']
    session = session_manager.get_or_create_session(user_id)

    operator_keyboard = [
        [InlineKeyboardButton(f"üìû –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã", callback_data=f"quick_responses_{user_id}")],
        [InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{user_id}")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="operator_stats")]
    ]
    operator_reply_markup = InlineKeyboardMarkup(operator_keyboard)

    lead_report = lead_service.create_lead_report(session)

    operator_message = f"""üîî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ {user_id}:**

{lead_report}

üí¨ **–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: `/reply_{user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç`
"""

    await query.edit_message_text(operator_message, reply_markup=operator_reply_markup)


async def handle_cancel_queue(update: Update, context: ContextTypes.DEFAULT_TYPE,
                              operator_handler: OperatorHandler):
    """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏"""
    query = update.callback_query
    user_id = query.from_user.id

    if user_id in operator_handler.operator_queue:
        operator_handler.operator_queue.remove(user_id)

    await query.edit_message_text(
        "‚ùå **–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–∑–∂–µ –∏–ª–∏ "
        "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.\n\n"
        "üìß –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: info@example.com"
    )


async def handle_operator_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    rating = int(query.data.replace("rate_", ""))

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # db = context.bot_data['db']
    # db.save_operator_rating(query.from_user.id, rating)

    thanks_messages = {
        1: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞.",
        2: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤. –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
        3: "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É! –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
        4: "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!",
        5: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! ‚≠ê –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!"
    }

    await query.edit_message_text(
        f"‚≠ê **–û—Ü–µ–Ω–∫–∞: {rating}/5**\n\n"
        f"{thanks_messages.get(rating, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')}\n\n"
        "üíô –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!"
    )


async def handle_operator_end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   operator_handler: OperatorHandler):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    user_id = int(query.data.replace("end_chat_", ""))
    operator_chat_id = query.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if user_id in operator_handler.active_conversations:
        await operator_handler.disconnect_user(user_id, operator_chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await query.edit_message_text(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="rate_operator")],
        [InlineKeyboardButton("üîÅ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–Ω–æ–≤–∞", callback_data="connect_manager")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üìû **–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
                 "–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.\n\n"
                 "üìß Email: info@example.com\n"
                 "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @education_support",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def show_operator_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê", callback_data="rate_1"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n"
        "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!",
        reply_markup=reply_markup
    )


async def connect_to_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)"""
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if 'operator_handler' not in context.bot_data:
        context.bot_data['operator_handler'] = OperatorHandler()

    operator_handler = context.bot_data['operator_handler']
    await operator_handler.request_operator(update, context)


async def notify_manager(session, context: ContextTypes.DEFAULT_TYPE, lead_service):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    if not Settings.MANAGER_USER_ID:
        print("MANAGER_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    lead_report = lead_service.create_lead_report(session)

    try:
        await context.bot.send_message(
            chat_id=int(Settings.MANAGER_USER_ID),
            text=lead_report
        )

        # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ –ë–î
        score = lead_service.calculate_lead_score(session)
        lead_service.db.create_lead(session.user_id, score)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö callback-–æ–≤
async def handle_program_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    await query.edit_message_text("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...")


async def handle_application_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    query = update.callback_query

    process_text = """
üìã **–ü—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:**

1Ô∏è‚É£ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –ø–æ–¥–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º** (1-2 –Ω–µ–¥–µ–ª–∏)
2Ô∏è‚É£ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** (2-4 –Ω–µ–¥–µ–ª–∏)  
3Ô∏è‚É£ **–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è** (1 –Ω–µ–¥–µ–ª—è)
4Ô∏è‚É£ **–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞** (2-8 –Ω–µ–¥–µ–ª—å)
5Ô∏è‚É£ **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è** (1 –¥–µ–Ω—å)
6Ô∏è‚É£ **–ü–æ–¥–∞—á–∞ –Ω–∞ –≤–∏–∑—É** (2-4 –Ω–µ–¥–µ–ª–∏)

üí° –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º!
    """

    keyboard = [
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", callback_data="connect_manager")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(process_text, reply_markup=reply_markup)