import os
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update

from config.settings import Settings
from database.education_db import EducationDatabase
from services.ai_service import AIService
from services.program_search import ProgramSearchService
from services.lead_service import LeadService
from utils.session_manager import SessionManager
from handlers.commands import start_command
from handlers.messages import handle_message
from handlers.callbacks import callback_handler
from handlers.operator import OperatorHandler


def setup_bot_data(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('data', exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    db = EducationDatabase(Settings.DATABASE_PATH)
    ai_service = AIService()
    program_search = ProgramSearchService(db)
    lead_service = LeadService(db)
    session_manager = SessionManager(db)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    operator_handler = OperatorHandler()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    application.bot_data.update({
        'db': db,
        'ai_service': ai_service,
        'program_search': program_search,
        'lead_service': lead_service,
        'session_manager': session_manager,
        'operator_handler': operator_handler
    })


async def operator_start_command(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    if str(update.effective_chat.id) == Settings.MANAGER_USER_ID:
        await update.message.reply_text(Settings.OPERATOR_WELCOME_MESSAGE)
    else:
        await start_command(update, context)


async def error_handler(update: Update, context):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...")

    if not Settings.TELEGRAM_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_TOKEN –≤ —Ñ–∞–π–ª .env")
        return

    if not Settings.MANAGER_USER_ID:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: MANAGER_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ MANAGER_USER_ID –≤ —Ñ–∞–π–ª .env –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")

    application = Application.builder().token(Settings.TELEGRAM_TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    setup_bot_data(application)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", operator_start_command))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("get_id", get_id_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    print("‚úÖ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üéì –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –∑–∞ —Ä—É–±–µ–∂–æ–º")
    print("üë®‚Äçüíº –°–∏—Å—Ç–µ–º–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    if Settings.MANAGER_USER_ID:
        print(f"üìû –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç: {Settings.MANAGER_USER_ID}")

    print("\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
    print("‚Ä¢ /help_operator - —Å–ø—Ä–∞–≤–∫–∞")
    print("‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("‚Ä¢ /reply_USER_ID —Ç–µ–∫—Å—Ç - –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É")
    print("\nüöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")

    application.run_polling(allowed_updates=Update.ALL_TYPES)


async def get_id_command(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"

    info_text = f"""
üÜî **–í–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:**

üë§ **User ID:** `{user_id}`
üí¨ **Chat ID:** `{chat_id}` 
üìù **Username:** @{username}

üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ User ID**
    """

    await update.message.reply_text(info_text)
if __name__ == "__main__":
    main()