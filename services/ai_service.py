from huggingface_hub import InferenceClient
from config.settings import Settings, AIPrompts
import json


class AIService:
    def __init__(self):
        self.client = InferenceClient(
            provider=Settings.AI_PROVIDER,
            api_key=Settings.HUGGINGFACE_TOKEN
        )

    async def get_response(self, message: str, user_profile: dict) -> tuple[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å –æ—Ü–µ–Ω–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–∞"""

        context = AIPrompts.CONSULTANT_SYSTEM + f"\n\nüìä –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê: {json.dumps(user_profile, ensure_ascii=False)}"

        try:
            completion = self.client.chat.completions.create(
                model=Settings.AI_MODEL,
                messages=[
                    {"role": "system", "content": context},
                    {"role": "user", "content": message}
                ],
                max_tokens=Settings.MAX_TOKENS,
                temperature=Settings.TEMPERATURE
            )

            response = completion.choices[0].message.content

            # –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞)
            interest_score = self._calculate_interest_score(message)

            return response, interest_score

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AI: {e}")
            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞ üòÖ –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å?", 0

    def _calculate_interest_score(self, message: str) -> int:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        interest_keywords = {
            'high': ['—Ö–æ—á—É –ø–æ—Å—Ç—É–ø–∞—Ç—å', '–∫–æ–≥–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å', '–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å'],
            'medium': ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é', '–¥—É–º–∞—é', '–ø–ª–∞–Ω–∏—Ä—É—é'],
            'low': ['–ø—Ä–æ—Å—Ç–æ —É–∑–Ω–∞—Ç—å', '–≤ –±—É–¥—É—â–µ–º', '–º–æ–∂–µ—Ç –±—ã—Ç—å']
        }

        interest_score = 0
        message_lower = message.lower()

        for level, keywords in interest_keywords.items():
            matches = sum(1 for keyword in keywords if keyword in message_lower)
            if level == 'high':
                interest_score += matches * 3
            elif level == 'medium':
                interest_score += matches * 2
            else:
                interest_score += matches * 1

        if '?' in message:
            interest_score += 1
        if any(word in message_lower for word in ['—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '–¥–µ–¥–ª–∞–π–Ω', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']):
            interest_score += 2

        return min(interest_score, 10)