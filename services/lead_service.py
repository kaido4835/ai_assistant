from datetime import datetime
from database.education_db import EducationDatabase
from database.models import UserSession
from config.settings import Settings

class LeadService:
    def __init__(self, db: EducationDatabase):
        self.db = db

    def should_notify_manager(self, session: UserSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return (session.interest_score >= Settings.MANAGER_NOTIFICATION_THRESHOLD and
                session.stage == "showing_results")

    def create_lead_report(self, session: UserSession) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ª–∏–¥–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return f"""
üî• **–ù–æ–≤—ã–π –ª–∏–¥!**

üë§ **–ö–ª–∏–µ–Ω—Ç ID:** {session.user_id}
üìä **–ò–Ω—Ç–µ—Ä–µ—Å:** {session.interest_score}/10
üéØ **–ü—Ä–æ—Ñ–∏–ª—å:**
{session.profile}

üí¨ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
{chr(10).join(session.conversation_history[-3:]) if session.conversation_history else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}

üïê **–í—Ä–µ–º—è:** {session.last_activity.strftime('%H:%M %d.%m.%Y')}
        """

    def calculate_lead_score(self, session: UserSession) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ª–∏–¥–∞ –æ—Ç 0 –¥–æ 100"""
        score = 0

        # –ü–æ–ª–Ω–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è (0-30 –±–∞–ª–ª–æ–≤)
        profile_fields = ['degree', 'field', 'max_budget', 'language']
        filled_fields = sum(1 for field in profile_fields if session.profile.get(field))
        score += (filled_fields / len(profile_fields)) * 30

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ (0-25 –±–∞–ª–ª–æ–≤)
        if len(session.conversation_history) > 10:
            score += 25
        elif len(session.conversation_history) > 5:
            score += 15
        elif len(session.conversation_history) > 2:
            score += 10

        # –ò–Ω—Ç–µ—Ä–µ—Å (0-45 –±–∞–ª–ª–æ–≤)
        score += session.interest_score * 4.5

        return min(int(score), 100)